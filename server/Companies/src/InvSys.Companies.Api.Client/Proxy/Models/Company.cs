// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace InvSys.Companies.Api.Client.Proxy.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Company
    {
        /// <summary>
        /// Initializes a new instance of the Company class.
        /// </summary>
        public Company() { }

        /// <summary>
        /// Initializes a new instance of the Company class.
        /// </summary>
        public Company(string symbol, string name, string description, Guid? id = default(Guid?), string culture = default(string), string exchange = default(string), Logo logo = default(Logo), string phone = default(string), string fax = default(string), string email = default(string), string address = default(string), string website = default(string), Industry industry = default(Industry), Sector sector = default(Sector), Subsector subsector = default(Subsector))
        {
            Id = id;
            Culture = culture;
            Exchange = exchange;
            Symbol = symbol;
            Name = name;
            Logo = logo;
            Phone = phone;
            Fax = fax;
            Email = email;
            Description = description;
            Address = address;
            Website = website;
            Industry = industry;
            Sector = sector;
            Subsector = subsector;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "culture")]
        public string Culture { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exchange")]
        public string Exchange { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "logo")]
        public Logo Logo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fax")]
        public string Fax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "website")]
        public string Website { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "industry")]
        public Industry Industry { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sector")]
        public Sector Sector { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subsector")]
        public Subsector Subsector { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (this.Symbol != null)
            {
                if (this.Symbol.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Symbol", 100);
                }
                if (this.Symbol.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Symbol", 2);
                }
            }
            if (this.Name != null)
            {
                if (this.Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (this.Name.Length < 2)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 2);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 3000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 3000);
                }
                if (this.Description.Length < 20)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 20);
                }
            }
        }
    }
}
