// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace InvSys.Financials.Api.Client.Proxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for FinancialsAPI.
    /// </summary>
    public static partial class FinancialsAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='startYear'>
            /// </param>
            /// <param name='endYear'>
            /// </param>
            public static IList<FinancialData> GetFinancialData(this IFinancialsAPI operations, string companySymbol, int? year = default(int?), int? startYear = default(int?), int? endYear = default(int?))
            {
                return Task.Factory.StartNew(s => ((IFinancialsAPI)s).GetFinancialDataAsync(companySymbol, year, startYear, endYear), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='startYear'>
            /// </param>
            /// <param name='endYear'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FinancialData>> GetFinancialDataAsync(this IFinancialsAPI operations, string companySymbol, int? year = default(int?), int? startYear = default(int?), int? endYear = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFinancialDataWithHttpMessagesAsync(companySymbol, year, startYear, endYear, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='financialData'>
            /// </param>
            public static FinancialData CreateFinancialData(this IFinancialsAPI operations, string companySymbol, FinancialData financialData = default(FinancialData))
            {
                return Task.Factory.StartNew(s => ((IFinancialsAPI)s).CreateFinancialDataAsync(companySymbol, financialData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='financialData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FinancialData> CreateFinancialDataAsync(this IFinancialsAPI operations, string companySymbol, FinancialData financialData = default(FinancialData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFinancialDataWithHttpMessagesAsync(companySymbol, financialData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='financialData'>
            /// </param>
            public static FinancialData UpdateFinancialData(this IFinancialsAPI operations, string companySymbol, int year, FinancialData financialData = default(FinancialData))
            {
                return Task.Factory.StartNew(s => ((IFinancialsAPI)s).UpdateFinancialDataAsync(companySymbol, year, financialData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='financialData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FinancialData> UpdateFinancialDataAsync(this IFinancialsAPI operations, string companySymbol, int year, FinancialData financialData = default(FinancialData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFinancialDataWithHttpMessagesAsync(companySymbol, year, financialData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            public static void DeleteFinancialData(this IFinancialsAPI operations, string companySymbol, int year)
            {
                Task.Factory.StartNew(s => ((IFinancialsAPI)s).DeleteFinancialDataAsync(companySymbol, year), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companySymbol'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFinancialDataAsync(this IFinancialsAPI operations, string companySymbol, int year, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteFinancialDataWithHttpMessagesAsync(companySymbol, year, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ApiValuesGet(this IFinancialsAPI operations)
            {
                return Task.Factory.StartNew(s => ((IFinancialsAPI)s).ApiValuesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiValuesGetAsync(this IFinancialsAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesPost(this IFinancialsAPI operations, string value = default(string))
            {
                Task.Factory.StartNew(s => ((IFinancialsAPI)s).ApiValuesPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesPostAsync(this IFinancialsAPI operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string ApiValuesByIdGet(this IFinancialsAPI operations, int id)
            {
                return Task.Factory.StartNew(s => ((IFinancialsAPI)s).ApiValuesByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiValuesByIdGetAsync(this IFinancialsAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesByIdPut(this IFinancialsAPI operations, int id, string value = default(string))
            {
                Task.Factory.StartNew(s => ((IFinancialsAPI)s).ApiValuesByIdPutAsync(id, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdPutAsync(this IFinancialsAPI operations, int id, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiValuesByIdDelete(this IFinancialsAPI operations, int id)
            {
                Task.Factory.StartNew(s => ((IFinancialsAPI)s).ApiValuesByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdDeleteAsync(this IFinancialsAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
